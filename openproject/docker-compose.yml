version: "3.8"

# Security-focused shared configurations
x-security-defaults: &security_defaults
  security_opt:
    - no-new-privileges:true
  cap_drop:
    - ALL
  cap_add:
    - CHOWN
    - SETGID
    - SETUID

x-resource-limits: &resource_limits
  deploy:
    resources:
      reservations:
        memory: 256M
      limits:
        memory: 2G
        cpus: '1.0'

x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "5"
      labels: "service,environment"

x-restart-policy: &restart_policy
  restart: unless-stopped

x-monitoring-labels: &monitoring_labels
  labels:
    - "prometheus.enable=true"
    - "prometheus.port=8080"
    - "environment=${ENVIRONMENT:-production}"

services:
  # Enhanced PostgreSQL with security hardening
  db:
    image: postgres:16-alpine
    <<: [*restart_policy, *logging, *security_defaults]
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C --auth-host=md5"
    secrets:
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/conf:/etc/postgresql:ro
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements,pg_stat_monitor
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_statement=mod
      -c log_min_duration_statement=1000
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G

  # Enhanced Redis with authentication
  redis:
    image: redis:7-alpine
    <<: [*restart_policy, *logging, *security_defaults]
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAXMEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Enhanced OpenProject web with security headers
  web:
    image: openproject/openproject:16
    <<: [*restart_policy, *logging, *security_defaults, *monitoring_labels]
    environment:
      # Database
      OPENPROJECT_DATABASE__ADAPTER: postgresql
      OPENPROJECT_DATABASE__HOST: db
      OPENPROJECT_DATABASE__NAME: ${POSTGRES_DB}
      OPENPROJECT_DATABASE__USERNAME: ${POSTGRES_USER}
      OPENPROJECT_DATABASE__PASSWORD__FILE: /run/secrets/postgres_password
      
      # Redis with auth
      OPENPROJECT_CACHE__REDIS__URL: redis://:${REDIS_PASSWORD}@redis:6379
      
      # Security headers
      OPENPROJECT_SECURITY__FORCE__HTTPS: "true"
      OPENPROJECT_SECURITY__HSTS: "true"
      OPENPROJECT_SECURITY__CSP__ENABLED: "true"
      OPENPROJECT_SECURITY__REFERRER__POLICY: "strict-origin-when-cross-origin"
      
      # Application
      OPENPROJECT_SECRET_KEY_BASE__FILE: /run/secrets/openproject_secret
      OPENPROJECT_HOST__NAME: ${OPENPROJECT_HOST__NAME}
      OPENPROJECT_HTTPS: "true"
      
      # Performance
      OPENPROJECT_WEB__WORKERS: ${OPENPROJECT_WEB__WORKERS:-4}
      OPENPROJECT_WEB__TIMEOUT: ${OPENPROJECT_WEB__TIMEOUT:-120}
      
      # Monitoring
      OPENPROJECT_SENTRY__DSN: ${SENTRY_DSN}
      RAILS_LOG_LEVEL: ${RAILS_LOG_LEVEL:-info}
    secrets:
      - postgres_password
      - openproject_secret
    volumes:
      - openproject_assets:/var/openproject/assets
      - openproject_logs:/var/log/openproject
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health_checks/default"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    networks:
      - frontend
      - backend
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G

  # Enhanced worker with auto-scaling
  worker:
    image: openproject/openproject:16
    <<: [*restart_policy, *logging, *security_defaults]
    command: "./docker/prod/worker"
    environment:
      <<: *web_environment
      OPENPROJECT_WORKER__CONCURRENCY: ${OPENPROJECT_WORKER__CONCURRENCY:-10}
    secrets:
      - postgres_password
      - openproject_secret
    volumes:
      - openproject_assets:/var/openproject/assets
      - openproject_logs:/var/log/openproject
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    deploy:
      replicas: ${WORKER_REPLICAS:-2}
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Enhanced reverse proxy with security headers
  proxy:
    image: caddy:2-alpine
    <<: [*restart_policy, *logging, *security_defaults]
    ports:
      - "443:443"
      - "80:80"
    environment:
      CADDY_ADMIN: "0.0.0.0:2019"
    volumes:
      - ./Caddyfile.prod:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
      - openproject_logs:/var/log/openproject:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - frontend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Enhanced monitoring stack
  prometheus:
    image: prom/prometheus:latest
    <<: [*restart_policy, *logging, *security_defaults]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    <<: [*restart_policy, *logging, *security_defaults]
    environment:
      GF_SECURITY_ADMIN_PASSWORD__FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_ANALYTICS_REPORTING_ENABLED: "false"
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - monitoring
      - frontend

  # Enhanced backup service with encryption
  backup:
    image: postgres:16-alpine
    <<: [*restart_policy, *logging, *security_defaults]
    environment:
      POSTGRES_PASSWORD__FILE: /run/secrets/postgres_password
      BACKUP_ENCRYPTION_KEY__FILE: /run/secrets/backup_encryption_key
      BACKUP_S3_BUCKET: ${BACKUP_S3_BUCKET}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      AWS_ACCESS_KEY_ID__FILE: /run/secrets/aws_access_key
      AWS_SECRET_ACCESS_KEY__FILE: /run/secrets/aws_secret_key
    secrets:
      - postgres_password
      - backup_encryption_key
      - aws_access_key
      - aws_secret_key
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - openproject_assets:/var/openproject/assets:ro
      - ./scripts/backup.sh:/backup.sh:ro
      - backup_logs:/var/log/backup
    command: |
      sh -c "
        apk add --no-cache aws-cli gnupg &&
        chmod +x /backup.sh &&
        /backup.sh
      "
    networks:
      - backend

  # Log aggregation
  loki:
    image: grafana/loki:latest
    <<: [*restart_policy, *logging, *security_defaults]
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    <<: [*restart_policy, *logging, *security_defaults]
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - openproject_logs:/var/log/openproject:ro
    networks:
      - monitoring

# Security: Define secrets
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  openproject_secret:
    file: ./secrets/openproject_secret.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  backup_encryption_key:
    file: ./secrets/backup_encryption_key.txt
  aws_access_key:
    file: ./secrets/aws_access_key.txt
  aws_secret_key:
    file: ./secrets/aws_secret_key.txt

# Network segmentation for security
networks:
  frontend:
    driver: bridge
    internal: false
  backend:
    driver: bridge
    internal: true
  monitoring:
    driver: bridge
    internal: true

# Persistent volumes with backup labels
volumes:
  postgres_data:
    driver: local
    labels:
      backup: "true"
      retention: "30d"
  redis_data:
    driver: local
    labels:
      backup: "true"
      retention: "7d"
  openproject_assets:
    driver: local
    labels:
      backup: "true"
      retention: "30d"
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  openproject_logs:
    driver: local
  backup_logs:
    driver: local
